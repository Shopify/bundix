#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift(File.expand_path('../../lib', __FILE__))

require('bundler')
require('bundix')

module Bundix2

  def self.lit(str)
    ::Bundix::Nixer::NixLiteral.new(str)
  end

  def self.call(lockfile_contents)
    lp = ::Bundler::LockfileParser.new(lockfile_contents)
    dep_cache = ::Bundix::DepCache.build(lp)

    data = lp.specs.reduce({}) do |acc, spec|
      dep = dep_cache.fetch(spec.name)

      static = {
        dependencies: spec.dependencies.map(&:name) - ['bundler'],
        groups: dep.groups.map(&:to_s),
        platforms: ::Bundix::PlatformResolver.resolve(dep.platforms),
      }

      final = case spec.source
      when ::Bundler::Source::Path
        static.merge(
          version: spec.version.to_s,
          source: { type: 'path', path: File.expand_path(spec.source.path.to_s) },
        )
      when ::Bundler::Source::Git
        static.merge(
          version: spec.version.to_s,
          source: {
            type: 'git',
            url: spec.source.options.fetch('uri').to_s,
            rev: spec.source.options.fetch('revision'),
            fetchSubmodules: !!spec.source.submodules,
          }
        )
      when ::Bundler::Source::Rubygems
        args = ::Bundix::Nixer.serialize({
          remotes: spec.source.remotes.map(&:to_s),
          name: spec.name,
          fullName: spec.full_name,
          version: spec.version.to_s,
          platform: spec.platform.to_s,
        }, indent: 1).strip

        sn = ::Bundix::Nixer.serialize(static.merge(
          version: lit('dyn.version'),
          source: {
            type: 'gem',
            remotes: [lit('dyn.remote')],
            sha256: lit('dyn.sha256'),
          }
        ), indent: 1).strip

        lit(<<~NIX.strip)
          (let dyn = (import (dyn-gem #{args})); in #{sn})
        NIX
      else
        raise('what')
      end

      acc.merge(spec.name => final)
    end

    <<~NIX
    let
      pkgs = import <nixpkgs> {};
      dyn-gem = { name, fullName, version, platform, remotes }:
        pkgs.runCommand "dyn-gem-${name}-${version}" {} ''
          ${pkgs.ruby}/bin/ruby ${/Users/burke/src/github.com/Shopify/bundix/bin/dyn-gem} \
            "${name}" "${fullName}" "${version}" "${platform}" "${builtins.concatStringsSep "\\" \\"" remotes}" > $out
        '';
    in #{::Bundix::Nixer.serialize(data)}
    NIX
  end
end

if __FILE__ == $PROGRAM_NAME
  puts(Bundix2.call(STDIN.read))
end
